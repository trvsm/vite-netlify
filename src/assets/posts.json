[
  {
    "title": "example",
    "date": "2024-01-27",
    "body": "<p>some content</p>"
  },

  {
    "title": "first",
    "date": "2024-01-27",
    "body": "wow two posts"
  },
  {
    "title": "Python Novice to Intermediate: Two Months of Learning & Applying",
    "date": "2024-03-02",
    "body": "What do you do to further your coding journey? I started the year with fresh eyes on Python, where I had brief experience before.  This post describes my experience Jan/Feb 2024 with Al Sweigart's Automate the Boring Stuff\n\nAutomate is largely a tutorial book aimed at beginners filled with practical projects and suggestions to develop your own programs.  It covers things like interacting with the file system, web scraping, excel/csv files and more.  I found the projects very strong.  I was able to apply the concepts right away and adapt to my own practical ideas.  There was one case where more detailed documentation or external links would have helped: re.VERBOSE.  It was great to write regexes in smaller chunks, but I tried to use it with lookarounds and ran into troubles.  There was content I didn't get too, definitely planning to return to this book for specific projects.  Overall I would recommend to new programmers, hobby programmers, and office workers with tasks to automate\n\nBeyond projects from Automate the Boring Stuff I worked on several projects including grabbing lines from invoices, prompting myself for morning gratitude journal, editing an html report, and creating a module for Odoo (an open source ERP software)\n\nTo compile from invoices I used Al's pyperclip module via pip, along with regular expressions. The flow that I supported was ctrl+a, ctrl+c to select an invoice in the browser and copy it, then run the python script matching a line pattern and copying the item name, sku, and cost back to the clipboard so I could paste to file.\n\nI used to write a quick morning journal in Google Docs.  I wanted to move my information more private, so I wrote a Python program to hold my journal.  It consists of several set questions with one skippable, a loop of affirmations, and an optional additional affirmation, then saves to file with date as the dictonary key.\n\nA friend asked for help to automate edits to reports from his work software.  This project was my first to run on Windows rather than Unix, so I learned about Windows paths and default encoder.\n\nFinally I got practice working in the Odoo codebase.  I work with this software for work. There's lots of room to customize Odoo through the GUI, sometimes it is easier to dive into the codebase.  Documentation is sparse, so it took some u with youtube and practice to create a project that brought useful function to the codebase\n\nThe crux of the past two months is Python supports hobby programmers to quickly build and run small projects locally.  There's a strong ecosystem of open source packages so programmers can focus on the specifics of a problem rather than reinventing the wheel.\n\nThe past two months have been lots of fun diving deeper into Python while developing practical projects quickly.  Automate the Boring stuff by Al Sweigart was a well written companion, with accurate examples and suggestions for further projects.  I expect to come back to Python for local projects like email automation and working with spreadsheets.  There are more advanced topics and projects ahead for me like stacks, decorators, concurrency, and machine learning projects.  I'm considering Al's 'Beyond the Basic Stuff' for further reading after some time on JavaScript projects.  Let me know if you have comments or suggestions: trvsmartin @ gmail"
  },
  {
    "title": "Monorepos & Raspberry Pi: March Learning Highlights",
    "date": "2024-04-06",
    "body": "How do you approach expanding on existing projects? After working with Python Jan/Feb I wanted to add depth to previous projects.  I revisited a meal planner full-stack Node/React web app, and dove deeper with Raspberry Pi using an e-paper display via Serial Peripheral Interface (SPI)\n\nIt's very common for projects to make use of both client and server side code.  I've done a number of projects with client &amp; server.  Stretching my skills this month I wanted to setup CI/CD to cover deploying client &amp; server with one pull request.  I still have some work to complete this.  My starting point was a JavaScript project: <a href='https://react.dev/'>React</a> client with an existing git repo, <a href='https://nodejs.org/en'>Node</a>/<a href='https://expressjs.com/'>Express</a> server, also with an existing git repo.  I have Netlify connected to my domain name so it is easy to create new projects and publish them to the web as a subdomain.  To accomplish this I created a new git repo and added the existing client and server as <a href='https://git-scm.com/book/en/v2/Git-Tools-Submodules'>git submodules</a>.  The end result: I can work on and manage the client/server as normal, and with one pull request deploy both to the web.  I got to practice more complex git workflows!  I still have to sort out some build commands and settings on the Netlify side to properly deploy.\n\nDo you have extra computers lying around?  I purchased a couple Raspberry Pi boards a few months ago out of curiousity and hadn't done much more than load the Raspberry Pi Os.  This month I got more familiar with the board by tackling an e-paper display project.  My goal was to create a small computer that's easy on the eyes.  I didn't quite reach the finish line with this project either, but I learned lots.  First of all I tried Pi Os Lite, since I wanted to just display terminal output on the e-paper display.  I connected a Waveshare e-paper HAT display.  The Pi does not natively output display made for e-paper, since there are particularities with refresh.  I loaded Waveshare's drivers via github and ran a successful test with the display.  I tried making use of <a href='https://github.com/joukos/PaperTTY'>PaperTTY</a>, and this is where I began learning.  First of all PaperTTY does not currently have support for the screen I purchased.  I tested existing drivers with no luck.  My next plan was to edit the source code, attempting to port Waveshare's working driver to the PaperTTY format.  I went down a long road struggling with dependencies related to Poetry: Twisted, Rust, and more.  After struggling to add the correct packages I reverted to a previous Raspberry Pi Os with Python 3.9 rather than 3.11.  This worked much more easily, with just one dependency to update.  I got a good look at driver structure, fascinated by the lookup tables that describe voltages to send to GPIO pins.  I managed to port in a driver that did not raise exceptions when running it, but I did not have luck properly displaying on the e-paper.  I'll attempt this further later.\n\nI am a bit undecided what to work on for April, though I am setting up to go to university and formalize my computer science study with an undergrad degree.  Thanks for reading!"
  },
  {
    "title": "Hitting Pause: A Slower Coding Month",
    "date": "2024-05-06",
    "body": "April was a shift in pacing for me.  While I maintained code with an update on a work project and wrote a small Python project, I didn't log as many commits as a typical month.  Instead few other things got my attention:\n-Using iSH to setup a Linux environment on my iPhone\n-Attending local tech meetups about AI and Game Dev\n-Reading up and dabbling in C++\n-Gearing up for a full Computer Science Bachelor's\n\nI attended local tech meetups for the first time. I felt a bit nervous, but managed to ask questions while presenters were presenting.  In early April the event theme was 'Testing AI'. Talks included bringing AI into the software dev lifecycle for automated testing, monitoring and testing 'alignment' of LLMs, and looping AI into corporate testing frameworks like testing chatbot responses.  The talk on alignment was particularly interesting, highlighting processes to monitor neural net activity when AI is known to be 'lying', correlating this activity with other responses to guage overall 'truthfulness'.\n\nThe second event I attended focused on game development. Talks included a student's first game in Godot, AR space-flight combat games, a puzzle-platformer in Unity, and a professional game developer who had a chance to work with prototype Apple Vision.  It was interesting to hear how important acting in a niche is in game development.  The AR studio is a small team, but spoke to their dedicated fanbase and the face they are pretty much the only AR space combat game, supporting things like Samsung Galaxy exclusive launches.  This point came across again with the professional independent developer; he has been invited to a number of specific projects for his expertise in physics modelling.\n\nDo you like to run linux everywhere?  Since I'm used to navigating via a Linux terminal now I find it frustrating when not available.  I added the iSH app to my phone and set up a development environment.  I am not yet very familiar with Vim, but I can now make use of the nano editor to code simple projects.  This included updating the reference repositories over the default ones used by iSH to typical APK repositories.  I made use of this environment on a road trip to write a simple 'decision maker' program in Python, and wrote/compiled/ran a simple 'hello world' in C!  It was a fun novelty and it makes for good practice writing code, using language features from memory, and paying very close attention to syntax without syntax highlighting and intelliSense completion.\n\nFinally I spent quite a bit of my free time this month preparing for a Computer Science degree.  I've been accepted to Thompson Rivers, and I had several steps to bring over transfer credits for other studies.  After that I investigated options to earn credit for my Computer Science self-study.  I've covered a number of topics in web and networking that will support my learning and qualify for credits.  Of course with all this planning around previous learning I had to start planning how to approach the new material.  It looks like I should be able to complete the program in two years of part-time study while working.  I'm excited to learn more and engage with new CS topics!"
  },
  {
    "title": "Self-Taught CS Book: Enhancing my Data Structure Skills",
    "date": "2024-06-04",
    "body": "This month I kept up my learning by reading \"The Self-Taught Computer Scientist\" by Cory Althof. Most introductory material I have studied and practiced with focus on lists/arrays and dictionaries/objects along with algorithms.  I've looked at a few other sources to get a better grip on data structures like linked lists and binary trees, but had trouble finding a good resource before this book.  Leetcode's learning material emphasized theory rather than real world application, and attempting to build my own curriculum was frustrating trying to decide what to prioritize.\n\nThe first half of the book covered familiar topics; Recursion, algorithms for search, sorting, strings, and math topics including binary and modulo division.  The data structures section introduced many unfamiliar topics with familiar examples.  The presentation of stacks and queues using Python arrays helped cement my understanding."
  }
]
